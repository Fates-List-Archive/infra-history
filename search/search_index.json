{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fates List API Fates List has two documentations, the main API docs (here) and the API endpoint documentation (See Endpoints ) The main API docs here go through webhooks, websockets, CSS and basic structures while the endpoint documentation is the \u201dproper\u201d API documentation and it goes through the API endpoints and what they return and it is automatically generated by our framework FastAPI. We hope you enjoy using the Fates List API just as we enjoyed making it for you! Endpoints For your convenience","title":"Fates List API"},{"location":"#fates-list-api","text":"Fates List has two documentations, the main API docs (here) and the API endpoint documentation (See Endpoints ) The main API docs here go through webhooks, websockets, CSS and basic structures while the endpoint documentation is the \u201dproper\u201d API documentation and it goes through the API endpoints and what they return and it is automatically generated by our framework FastAPI. We hope you enjoy using the Fates List API just as we enjoyed making it for you!","title":"Fates List API"},{"location":"#endpoints","text":"For your convenience","title":"Endpoints"},{"location":"advanced/self-hosting/","text":"Self Hosting Licensed under the MIT. We will not support self hosting or copying our list whatsoever, you are on your own and you MUST additionally give credit and change the branding. This is the source code for Fates List BTW please add your bots there if you want to support us Danger Fates List is very very difficult to self host. It also needs a huge amount of moving parts. How to deploy Buy a domain (You will need a domain that can be added to Cloudflare in order to use Fates List. We use namecheap for this) Add the domain to Cloudflare (see this ). Our whole website requires Cloudflare as the DNS in order to work. Buy a Linux VPS (You need a Linux VPS or a Linux home server with a public ip with port 443 open) 4a) In Cloudflare, create a record (A/CNAME) called @ that points to your VPS ip/hostname 4b) In Cloudflare, go to Speed > Optimization. Enable AMP Real URL 4c) In Cloudflare, go to SSL/TLS, set the mode to Full (strict), enable Authenticated Origin Pull, make an origin certificate (in Origin Server) and save the private key as /key.pem on your VPS and the certificate as /cert.pem on your VPS 4d) Download https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem and save it on the VPS as /origin-pull-ca.pem. Download this repo on the VPS using git clone https://github.com/Fates-List/FatesList . Make sure the location it is downloaded to is publicly accessible AKA not in a /root folder or anything like that. Enter Fates List directory, copy config_secrets_template.py to config_secrets.py and fill in the required information on there. You do not need to change site_url or mobile_site_url fields (site and mobile_site do need to be filled in without the https://). Download, install and configure nginx, redis, rabbitmq, python3.10, PostgreSQL (using the pg_user and pg_pwd you setup in config.py). Run su postgres and then run psql and finally run \\i schema.sql to setup the postgres schema. Then install swarm64 Enter the admin folder, then run python3 manage.py makemigrations and then run python3 manage.py migrate (where python3 is python3.10) Remove the /etc/nginx folder, then copy the nginx folder from this repo to /etc. Change the server_name values /etc/nginx/conf.d/default.conf to reflect your domain Restart nginx Install tmux, then run tmux new -s main Install fastapi-limiter from https://github.com/Fates-List/fastapi-limiter and aioredis from https://github.com/Fates-List/aioredis-py Run pip3 install -r requirements.txt Run ./run in the repo folder Hit Ctrl-B. Then run tmux new -s rabbit . Then run python3 rabbitmq_worker.py Fates List probihits the monetization or resale of coins for money","title":"Self Hosting"},{"location":"advanced/self-hosting/#self-hosting","text":"Licensed under the MIT. We will not support self hosting or copying our list whatsoever, you are on your own and you MUST additionally give credit and change the branding. This is the source code for Fates List BTW please add your bots there if you want to support us Danger Fates List is very very difficult to self host. It also needs a huge amount of moving parts. How to deploy Buy a domain (You will need a domain that can be added to Cloudflare in order to use Fates List. We use namecheap for this) Add the domain to Cloudflare (see this ). Our whole website requires Cloudflare as the DNS in order to work. Buy a Linux VPS (You need a Linux VPS or a Linux home server with a public ip with port 443 open) 4a) In Cloudflare, create a record (A/CNAME) called @ that points to your VPS ip/hostname 4b) In Cloudflare, go to Speed > Optimization. Enable AMP Real URL 4c) In Cloudflare, go to SSL/TLS, set the mode to Full (strict), enable Authenticated Origin Pull, make an origin certificate (in Origin Server) and save the private key as /key.pem on your VPS and the certificate as /cert.pem on your VPS 4d) Download https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem and save it on the VPS as /origin-pull-ca.pem. Download this repo on the VPS using git clone https://github.com/Fates-List/FatesList . Make sure the location it is downloaded to is publicly accessible AKA not in a /root folder or anything like that. Enter Fates List directory, copy config_secrets_template.py to config_secrets.py and fill in the required information on there. You do not need to change site_url or mobile_site_url fields (site and mobile_site do need to be filled in without the https://). Download, install and configure nginx, redis, rabbitmq, python3.10, PostgreSQL (using the pg_user and pg_pwd you setup in config.py). Run su postgres and then run psql and finally run \\i schema.sql to setup the postgres schema. Then install swarm64 Enter the admin folder, then run python3 manage.py makemigrations and then run python3 manage.py migrate (where python3 is python3.10) Remove the /etc/nginx folder, then copy the nginx folder from this repo to /etc. Change the server_name values /etc/nginx/conf.d/default.conf to reflect your domain Restart nginx Install tmux, then run tmux new -s main Install fastapi-limiter from https://github.com/Fates-List/fastapi-limiter and aioredis from https://github.com/Fates-List/aioredis-py Run pip3 install -r requirements.txt Run ./run in the repo folder Hit Ctrl-B. Then run tmux new -s rabbit . Then run python3 rabbitmq_worker.py Fates List probihits the monetization or resale of coins for money","title":"Self Hosting"},{"location":"basics/api-pinning/","text":"API Pinning When using the Fates List API, be sure to pin the api version. The /api will always point to latest API version thanks to our versioning middleware and this version may change often . To avoid breaking changes, just pin the version you are using. Note that the endpoint docs use the Direct Pinning, while you typically want and we recommend Header Pinning Header Pinning The first way to pin the version is by using the \u2019FL-API-Version\u2019 header. Just set this header to the API version you are using (just the number, not the v part). Direct Pinning Another very common way to pin the API versiom is to directly access the needed version using /api/vVERSION/endpoint like in the endpoint docs instead of /api. This is the most common form of pinning. This does not apply to documentation Middleware Information (for those curious) The /api route actually handled by a ASGI middleware which sees the API request, checks for version pinning and whether it\u2019s a API request or a docs request and then edits the ASGI scope (I know, this is hacky but the easiest and probably the only way) accordingly to handle the API with the default API version internally pinned if not explicitly overrided otherwise. This default version pin is what allows you to use the API without pinning.","title":"API Pinning"},{"location":"basics/api-pinning/#api-pinning","text":"When using the Fates List API, be sure to pin the api version. The /api will always point to latest API version thanks to our versioning middleware and this version may change often . To avoid breaking changes, just pin the version you are using. Note that the endpoint docs use the Direct Pinning, while you typically want and we recommend Header Pinning Header Pinning The first way to pin the version is by using the \u2019FL-API-Version\u2019 header. Just set this header to the API version you are using (just the number, not the v part). Direct Pinning Another very common way to pin the API versiom is to directly access the needed version using /api/vVERSION/endpoint like in the endpoint docs instead of /api. This is the most common form of pinning. This does not apply to documentation Middleware Information (for those curious) The /api route actually handled by a ASGI middleware which sees the API request, checks for version pinning and whether it\u2019s a API request or a docs request and then edits the ASGI scope (I know, this is hacky but the easiest and probably the only way) accordingly to handle the API with the default API version internally pinned if not explicitly overrided otherwise. This default version pin is what allows you to use the API without pinning.","title":"API Pinning"},{"location":"basics/api-versions/","text":"API Versions Version Working Status Default v1 No Deprecated No v2 Yes Beta (Beta 3 is latest) Yes","title":"API Versions"},{"location":"basics/api-versions/#api-versions","text":"Version Working Status Default v1 No Deprecated No v2 Yes Beta (Beta 3 is latest) Yes","title":"API Versions"},{"location":"basics/endpoints/","text":"Endpoints You can find all the endpoints provided by Fates List in two different formats: Redoc (recommended): https://fateslist.xyz/api/docs/redoc Swagger: https://fateslist.xyz/api/docs/swagger OpenAPI JSON: https://fateslist.xyz/api/docs/openapi These endpoints are subject to change over time. For information on the rest of the API and how to use the API, continue reading the API Documentation here. The above URLs cover all the endpoints with the schema and this documentation (the main one) just covers the additionals things you need to know in order to read the above properly.","title":"Endpoints"},{"location":"basics/endpoints/#endpoints","text":"You can find all the endpoints provided by Fates List in two different formats: Redoc (recommended): https://fateslist.xyz/api/docs/redoc Swagger: https://fateslist.xyz/api/docs/swagger OpenAPI JSON: https://fateslist.xyz/api/docs/openapi These endpoints are subject to change over time. For information on the rest of the API and how to use the API, continue reading the API Documentation here. The above URLs cover all the endpoints with the schema and this documentation (the main one) just covers the additionals things you need to know in order to read the above properly.","title":"Endpoints"},{"location":"changelog/v2_beta2/","text":"API v2 beta 2 (April 5th, 2021) Changes Renamed /api/bots/ext/index to /api/index/bots (pinned: /api/v2/index/bots ) Renamed /api/bots/ext/search to /api/search/bots (pinned: /api/v2/search/bots ) Added /api/search/profiles (pinned: /api/v2/search/profiles ) for Profile Search Added Add Bot (POST /api/bots/BOTID , pinned: /api/v2/bots/BOTID ) and Edit Bot (PATCH /api/bots/BOTID , pinned: /api/v2/bots/BOTID ) Most (if not all) PUT requests are now POST, some parameter and endpoint names and routes have either changed, split or have been added, read the endpoint documentation at Endpoints for more information on what has changed Added proper API versioning to ensure such rough transitions do not happen again. Timestamped Votes API no longer sends payload: timestamp at the start of the JSON Getting reviews is now a seperate endpoint at /api/bots/BOTID/reviews (pinned: /api/v2/bots/BOTID/reviews ) Getting promotions and maintenance mode are similarly seperate endpoints Fixes Regenerate Bot Token API now works and doesn\u2019t error with a 500 Timestamped Votes API now works and doesn\u2019t error with a 500 Timestamped Votes API no longer sends payload: timestamp at the start of the JSON","title":"API v2 beta 2 (April 5th, 2021)"},{"location":"changelog/v2_beta2/#api-v2-beta-2-april-5th-2021","text":"","title":"API v2 beta 2 (April 5th, 2021)"},{"location":"changelog/v2_beta2/#changes","text":"Renamed /api/bots/ext/index to /api/index/bots (pinned: /api/v2/index/bots ) Renamed /api/bots/ext/search to /api/search/bots (pinned: /api/v2/search/bots ) Added /api/search/profiles (pinned: /api/v2/search/profiles ) for Profile Search Added Add Bot (POST /api/bots/BOTID , pinned: /api/v2/bots/BOTID ) and Edit Bot (PATCH /api/bots/BOTID , pinned: /api/v2/bots/BOTID ) Most (if not all) PUT requests are now POST, some parameter and endpoint names and routes have either changed, split or have been added, read the endpoint documentation at Endpoints for more information on what has changed Added proper API versioning to ensure such rough transitions do not happen again. Timestamped Votes API no longer sends payload: timestamp at the start of the JSON Getting reviews is now a seperate endpoint at /api/bots/BOTID/reviews (pinned: /api/v2/bots/BOTID/reviews ) Getting promotions and maintenance mode are similarly seperate endpoints","title":"Changes"},{"location":"changelog/v2_beta2/#fixes","text":"Regenerate Bot Token API now works and doesn\u2019t error with a 500 Timestamped Votes API now works and doesn\u2019t error with a 500 Timestamped Votes API no longer sends payload: timestamp at the start of the JSON","title":"Fixes"},{"location":"css/buttons/","text":"Buttons Internal Name/ID Description support Support Button github Github Button website Website Button invite Invite button vote Vote button edit Edit button Replace button_name with the Internal Name from here when referencing a button using .bot-buttons- button_name","title":"Buttons"},{"location":"css/buttons/#buttons","text":"Internal Name/ID Description support Support Button github Github Button website Website Button invite Invite button vote Vote button edit Edit button Replace button_name with the Internal Name from here when referencing a button using .bot-buttons- button_name","title":"Buttons"},{"location":"css/selectors/","text":"Selectors Key TYPE() means that there are many TYPEs as subchildren of this object and TYPE[] means that there are multiple of these TYPES retrieved as an array and not as subchildren when you use document.querySelectorAll on it. TYPE{} means both and is equivalent to TYPE()[]. Anything in bold is a variable and you should see the description for information about it. Name Description Tag Type Object Selector bot-content The entire div your bot page is in div id Bot #bot-content bot-avatar The bots avatar img id Avatar #bot-avatar bot-username The bots username h3 id Username #bot-username bot-description Your bots short description h3 id Description #bot-description bot-buttons The main buttons. If you want to change an individual button, .bot-buttons- button_name div id Button() #bot-buttons bot-buttons- button_name A specific button, see the Buttons section for more information on button names button id Button #bot-buttons- button_name bot-key-container The div containing tags and promotions both div id KeyContainer #bot-key-container bot-tags The div containing all your tags and the header div id Tag() #bot-tags bot-tags-header The \"Tags\" part of the tags h5 id TagHeader #bot-tags-header bot-tags-container The div inside #bot-tags that contains just the tags (not the header) div id TagInner() #bot-tags-container bot-tags-container-inner The div inside #bot-tags-container to help position the tags div id Tag() #bot-tags-container-inner bot-tags- tag_name -button The actual tag, see the Tags section for more information on tag names button id TagButton #bot-tags- tag_name -button bot-promo This is the div containing all promotions div id PromoFull #bot-promo bot-promo-header This is the header of all the promotions (the Special Promotions/Events) h5 id PromoHeader #bot-promo-header bot-promo-container This is the container for a promo div[] class Promotion[] .bot-promo-container bot-promo-container- index This is one promo based on jinja2 loop.index which is a number going from 0 to the N-1th promo index div id Promotion #bot-promo-container- index bot-long-description The bots long description. All links are given the long-desc-link class (selector: .long-desc-link) div id LongDescription #bot-long-description bot-long-description-container The container around the long description div id LongDescriptionContainer #bot-long-description-container long-desc-link All links in long descriptiom get this class making it grey by default. Use ldlink class instead as this class causes side effects a[] class LongDescriptionInternalLink[] .long-desc-link ldlink All links in long description get this as well. It is highly recommended to use this over long-desc-link as this doesn\u2019t break other things in your bot page a[] class LongDescriptionLink[] .ldlink bot-switcher This is the bot switcher (The Description, Review, Commands, About and Admin tabs) div id BotSwitcher #bot-switcher tablinks All of the tabs currently button[] class Tab[] .tablinks bot- tab_name -tab-button The actual switcher tab, see the Switcher Tabs section for more information on the tab names button id Tab #bot- tab_name -tab-button review_form This is the review form used when making reviews. It is internal and is only being documented to be complete. Do not change this unless absolutely needed form id _ReviewForm #review_form reviewreply- review_id This is the review form used when making replies to reviews. It is internal and is only being documented to be complete. Do not change this unless absolutely needed. The review id here is the id of the review you are trying to reply to. form id _ReviewReply #reviewreply- review_id review- review_id This is the review form used when editing reviews. It is internal and is only being documented to be complete. Do not change this unless absolutely needed. The review id here is the id of the review you are trying to edit. form id _ReviewEdit #review- review_id bot-review-header This is the review header (The place with stars and the edit link) div[] class ReviewHeader[] .bot-review-header bot-review-user This is the main review comtainer div{} class ReviewUser{} .bot-review-user bot-reviews The bot review container div id BotReviews #bot-reviews bot-range-slider The slider for the creatiom and editing of bot reviews and replies. input[] class BotRangeSlider[] .bot-range-slider","title":"Selectors"},{"location":"css/selectors/#selectors","text":"Key TYPE() means that there are many TYPEs as subchildren of this object and TYPE[] means that there are multiple of these TYPES retrieved as an array and not as subchildren when you use document.querySelectorAll on it. TYPE{} means both and is equivalent to TYPE()[]. Anything in bold is a variable and you should see the description for information about it. Name Description Tag Type Object Selector bot-content The entire div your bot page is in div id Bot #bot-content bot-avatar The bots avatar img id Avatar #bot-avatar bot-username The bots username h3 id Username #bot-username bot-description Your bots short description h3 id Description #bot-description bot-buttons The main buttons. If you want to change an individual button, .bot-buttons- button_name div id Button() #bot-buttons bot-buttons- button_name A specific button, see the Buttons section for more information on button names button id Button #bot-buttons- button_name bot-key-container The div containing tags and promotions both div id KeyContainer #bot-key-container bot-tags The div containing all your tags and the header div id Tag() #bot-tags bot-tags-header The \"Tags\" part of the tags h5 id TagHeader #bot-tags-header bot-tags-container The div inside #bot-tags that contains just the tags (not the header) div id TagInner() #bot-tags-container bot-tags-container-inner The div inside #bot-tags-container to help position the tags div id Tag() #bot-tags-container-inner bot-tags- tag_name -button The actual tag, see the Tags section for more information on tag names button id TagButton #bot-tags- tag_name -button bot-promo This is the div containing all promotions div id PromoFull #bot-promo bot-promo-header This is the header of all the promotions (the Special Promotions/Events) h5 id PromoHeader #bot-promo-header bot-promo-container This is the container for a promo div[] class Promotion[] .bot-promo-container bot-promo-container- index This is one promo based on jinja2 loop.index which is a number going from 0 to the N-1th promo index div id Promotion #bot-promo-container- index bot-long-description The bots long description. All links are given the long-desc-link class (selector: .long-desc-link) div id LongDescription #bot-long-description bot-long-description-container The container around the long description div id LongDescriptionContainer #bot-long-description-container long-desc-link All links in long descriptiom get this class making it grey by default. Use ldlink class instead as this class causes side effects a[] class LongDescriptionInternalLink[] .long-desc-link ldlink All links in long description get this as well. It is highly recommended to use this over long-desc-link as this doesn\u2019t break other things in your bot page a[] class LongDescriptionLink[] .ldlink bot-switcher This is the bot switcher (The Description, Review, Commands, About and Admin tabs) div id BotSwitcher #bot-switcher tablinks All of the tabs currently button[] class Tab[] .tablinks bot- tab_name -tab-button The actual switcher tab, see the Switcher Tabs section for more information on the tab names button id Tab #bot- tab_name -tab-button review_form This is the review form used when making reviews. It is internal and is only being documented to be complete. Do not change this unless absolutely needed form id _ReviewForm #review_form reviewreply- review_id This is the review form used when making replies to reviews. It is internal and is only being documented to be complete. Do not change this unless absolutely needed. The review id here is the id of the review you are trying to reply to. form id _ReviewReply #reviewreply- review_id review- review_id This is the review form used when editing reviews. It is internal and is only being documented to be complete. Do not change this unless absolutely needed. The review id here is the id of the review you are trying to edit. form id _ReviewEdit #review- review_id bot-review-header This is the review header (The place with stars and the edit link) div[] class ReviewHeader[] .bot-review-header bot-review-user This is the main review comtainer div{} class ReviewUser{} .bot-review-user bot-reviews The bot review container div id BotReviews #bot-reviews bot-range-slider The slider for the creatiom and editing of bot reviews and replies. input[] class BotRangeSlider[] .bot-range-slider","title":"Selectors"},{"location":"css/tabs/","text":"Tabs Switcher Tabs Internal Name/ID Display Name Description long-desc Description The long description tab. Also the default tab review Reviews The review tab commands Commands The commands tab (coming soon) about About The about tab admin Admin The admin tab. Not user accessible and we have a staff panel so trying to hide this will result in a bot ban as soon as we find out","title":"Tabs"},{"location":"css/tabs/#tabs","text":"","title":"Tabs"},{"location":"css/tabs/#switcher-tabs","text":"Internal Name/ID Display Name Description long-desc Description The long description tab. Also the default tab review Reviews The review tab commands Commands The commands tab (coming soon) about About The about tab admin Admin The admin tab. Not user accessible and we have a staff panel so trying to hide this will result in a bot ban as soon as we find out","title":"Switcher Tabs"},{"location":"css/tags/","text":"Tags Tag Types Type ID Description 0 Global Tag (both bot+server tag) 1 Bot Tag 2 Server Tag Tag Info Internal Name/ID Icon Type music fa-solid:music 0 moderation fa-solid:hammer 0 economy fa-solid:coins 0 fun fa-solid:heart 0 anime fa-solid:camera 0 games fa-solid:smile 0 web_dashboard fa-solid:chart-bar 0 logging fa-solid:chart-line 0 game_stats fa-solid:chart-pie 0 leveling fa-solid:arrow-up 0 roleplay fa-solid:cat 0 utility fa-solid:desktop 0 social fa-solid:users 0 meme cib:happycow 0 reddit akar-icons:reddit-fill 0 pokemon mdi-pokemon-go 0","title":"Tags"},{"location":"css/tags/#tags","text":"","title":"Tags"},{"location":"css/tags/#tag-types","text":"Type ID Description 0 Global Tag (both bot+server tag) 1 Bot Tag 2 Server Tag","title":"Tag Types"},{"location":"css/tags/#tag-info","text":"Internal Name/ID Icon Type music fa-solid:music 0 moderation fa-solid:hammer 0 economy fa-solid:coins 0 fun fa-solid:heart 0 anime fa-solid:camera 0 games fa-solid:smile 0 web_dashboard fa-solid:chart-bar 0 logging fa-solid:chart-line 0 game_stats fa-solid:chart-pie 0 leveling fa-solid:arrow-up 0 roleplay fa-solid:cat 0 utility fa-solid:desktop 0 social fa-solid:users 0 meme cib:happycow 0 reddit akar-icons:reddit-fill 0 pokemon mdi-pokemon-go 0","title":"Tag Info"},{"location":"css/useful-information/","text":"Useful Information In addition to the CSS reference here, Fates List also uses djibe material as a framework ( https://djibe.github.io/material/ ) As such you can use anything from djibe material in your CSS or your long description without needing to load the library. Do not load in custom css frameworks as this will break your bots long description. Some Useful Classes .btn - Basic button. Use this with another button class like .btn-outline-light .btn-outline-light - This is what Fates List uses for all of its buttons. Use this to fit in with the Fates List theme.","title":"Useful Information"},{"location":"css/useful-information/#useful-information","text":"In addition to the CSS reference here, Fates List also uses djibe material as a framework ( https://djibe.github.io/material/ ) As such you can use anything from djibe material in your CSS or your long description without needing to load the library. Do not load in custom css frameworks as this will break your bots long description.","title":"Useful Information"},{"location":"css/useful-information/#some-useful-classes","text":".btn - Basic button. Use this with another button class like .btn-outline-light .btn-outline-light - This is what Fates List uses for all of its buttons. Use this to fit in with the Fates List theme.","title":"Some Useful Classes"},{"location":"structures/basic-structures/","text":"Basic Structures Terminology Snowflake: A snowflake is a discord snowflake (user ID) in string format (like \"563808552288780322\") Structures BaseUser A BaseUser represents a user on Fates List (See https://github.com/Fates-List/FatesList/blob/main/modules/models/api_v2.py , link may change). A User, Bot, BotPartial (index and search page uses this) and ProfilePartial (profile search uses this) object both extend the BaseUser class. This is a basic structure that can be seen everywhere in the Fates List API. Note that all values here are according to our 8 hour redis cache we have setup to avoid being ratelimited. Structure Name Description Type id The ID of the user Snowflake username The username of the user String avatar The avatar URL of the user String disc The discriminator String status The status of rhe user Status (see below) bot Whether the user is a bot or not Boolean Status Fates List also records the users status as well. This is internally an integer to save space and to decrease API response time, we use the same internal values in our API too. Status Number Corresponding Status 0 Unknown Status 1 Online 2 Offline/Invisible 3 Idle 4 Do Not Disturb Bot State Fates List has an advanced moderation system based on something called a state. Every bot has a state which is an integer which dictates what the current state of the bot is, whether it is banned, in queue, under review, certified etc. and more. It is the most important attribute about a bot on Fates List. Users and servers have this as well State Number Corresponding State 0 Verified/Approved 1 In Queue 2 Denied 3 Hidden/Private (internal, only settable by staff) 4 Banned 5 Under Review (set by running +claim in Test Server by staff) 6 Certified 7 Archived (set to read only by owner) User State Similar to a bot, users have state as well: State Number Corresponding State 0 Normal 1 Global Ban 2 Login Ban 3 Profile Edit Ban 4 Data Deletion Request Ban (not possible to get in the API however) Partial Objects While these are not a \u201cbasic structure\u201d, they are still fundemental to the Fates List API, if you see the schema for Fates List, you will notice multiple *Partial schemas. These schemas mean that they are partial or incomplete objects. An example is add bot, where a BotMeta (which is a partial object) is used, fields here may be different from the main due to lack of information and so should be seperate types when you code for the Fates List API.","title":"Basic Structures"},{"location":"structures/basic-structures/#basic-structures","text":"","title":"Basic Structures"},{"location":"structures/basic-structures/#terminology","text":"Snowflake: A snowflake is a discord snowflake (user ID) in string format (like \"563808552288780322\")","title":"Terminology"},{"location":"structures/basic-structures/#structures","text":"","title":"Structures"},{"location":"structures/basic-structures/#baseuser","text":"A BaseUser represents a user on Fates List (See https://github.com/Fates-List/FatesList/blob/main/modules/models/api_v2.py , link may change). A User, Bot, BotPartial (index and search page uses this) and ProfilePartial (profile search uses this) object both extend the BaseUser class. This is a basic structure that can be seen everywhere in the Fates List API. Note that all values here are according to our 8 hour redis cache we have setup to avoid being ratelimited. Structure Name Description Type id The ID of the user Snowflake username The username of the user String avatar The avatar URL of the user String disc The discriminator String status The status of rhe user Status (see below) bot Whether the user is a bot or not Boolean","title":"BaseUser"},{"location":"structures/basic-structures/#status","text":"Fates List also records the users status as well. This is internally an integer to save space and to decrease API response time, we use the same internal values in our API too. Status Number Corresponding Status 0 Unknown Status 1 Online 2 Offline/Invisible 3 Idle 4 Do Not Disturb","title":"Status"},{"location":"structures/basic-structures/#bot-state","text":"Fates List has an advanced moderation system based on something called a state. Every bot has a state which is an integer which dictates what the current state of the bot is, whether it is banned, in queue, under review, certified etc. and more. It is the most important attribute about a bot on Fates List. Users and servers have this as well State Number Corresponding State 0 Verified/Approved 1 In Queue 2 Denied 3 Hidden/Private (internal, only settable by staff) 4 Banned 5 Under Review (set by running +claim in Test Server by staff) 6 Certified 7 Archived (set to read only by owner)","title":"Bot State"},{"location":"structures/basic-structures/#user-state","text":"Similar to a bot, users have state as well: State Number Corresponding State 0 Normal 1 Global Ban 2 Login Ban 3 Profile Edit Ban 4 Data Deletion Request Ban (not possible to get in the API however)","title":"User State"},{"location":"structures/basic-structures/#partial-objects","text":"While these are not a \u201cbasic structure\u201d, they are still fundemental to the Fates List API, if you see the schema for Fates List, you will notice multiple *Partial schemas. These schemas mean that they are partial or incomplete objects. An example is add bot, where a BotMeta (which is a partial object) is used, fields here may be different from the main due to lack of information and so should be seperate types when you code for the Fates List API.","title":"Partial Objects"},{"location":"structures/partial-review/","text":"Partial Review This page covers the structure of a partial review which is seen in review events Partial reviews are sent on new review and edit review events. They are a partial representation of the created or edited review: Key Description Type user The user ( BaseUser object) who performed the event on the review (see Basic Structures ) BaseUser id This is the id of the review UUID star_rating How many stars (out of 10) was given Float reply Whether the review is a reply or not. Boolean root The parent of the review. This will be null if the review is not a reply. Only sent in a new_review event. UUID? review The content/text of the review String upvotes The amount of upvotes the review has. Only sent in vote_review event. Integer? downvotes The amount of downvotes the review has. Only sent in vote_review event. Integer?","title":"Partial Review"},{"location":"structures/partial-review/#partial-review","text":"This page covers the structure of a partial review which is seen in review events Partial reviews are sent on new review and edit review events. They are a partial representation of the created or edited review: Key Description Type user The user ( BaseUser object) who performed the event on the review (see Basic Structures ) BaseUser id This is the id of the review UUID star_rating How many stars (out of 10) was given Float reply Whether the review is a reply or not. Boolean root The parent of the review. This will be null if the review is not a reply. Only sent in a new_review event. UUID? review The content/text of the review String upvotes The amount of upvotes the review has. Only sent in vote_review event. Integer? downvotes The amount of downvotes the review has. Only sent in vote_review event. Integer?","title":"Partial Review"},{"location":"structures/review/","text":"Reviews All reviews share the below format. This structure is used in the Get Review API and in new review and edit review events. Reviews totally have two parts. The list of review objects (and their replies) in the reviews key and a key called average_stars at the end of all reviews and replies which tells you the average stars your bot (or server) has overall as a float Key Description Type reviews The list of review objects (and their replies) Review [] average_stars The average stars your bot or guild has overall with all reviews (not replies) taken into account Float Review Object Key Description Type id This is the id of the review UUID reply Whether the review is a reply or not Boolean user_id The User ID of the person who made the review Snowflake star_rating How many stars (out of 10) was given Float review The content/text of the review String review_upvotes The User IDs of all people who have upvoted the review Snowflake[] review_downvotes The User IDs of all people who have downvoted the review Snowflake[] flagged Whether the review has been flagged or not. You won\u2019t get an event when this happens for safety reasons Boolean epoch The epoch timestamps of all the times the review was edited Snowflake[] time_past The amount of time since the review was first created Snowflake user The user (BaseUser object) who performed the event on the review (see Basic Structures ) BaseUser (see Basic Structures ) replies The list of review objects which are replies to your bot Review []","title":"Reviews"},{"location":"structures/review/#reviews","text":"All reviews share the below format. This structure is used in the Get Review API and in new review and edit review events. Reviews totally have two parts. The list of review objects (and their replies) in the reviews key and a key called average_stars at the end of all reviews and replies which tells you the average stars your bot (or server) has overall as a float Key Description Type reviews The list of review objects (and their replies) Review [] average_stars The average stars your bot or guild has overall with all reviews (not replies) taken into account Float","title":"Reviews"},{"location":"structures/review/#review-object","text":"Key Description Type id This is the id of the review UUID reply Whether the review is a reply or not Boolean user_id The User ID of the person who made the review Snowflake star_rating How many stars (out of 10) was given Float review The content/text of the review String review_upvotes The User IDs of all people who have upvoted the review Snowflake[] review_downvotes The User IDs of all people who have downvoted the review Snowflake[] flagged Whether the review has been flagged or not. You won\u2019t get an event when this happens for safety reasons Boolean epoch The epoch timestamps of all the times the review was edited Snowflake[] time_past The amount of time since the review was first created Snowflake user The user (BaseUser object) who performed the event on the review (see Basic Structures ) BaseUser (see Basic Structures ) replies The list of review objects which are replies to your bot Review []","title":"Review Object"},{"location":"webhook/fateshook/","text":"FatesHook (Fates Client) Note There are many types of webhooks in Fates List. Please choose the one you use carefully. Also note that all Fates List webhooks (excl. Discord Integration) will have a Authorization header with your API Token so you can validate the request. FatesHook is a webhook type to get additional events like edit bot, review events and more. These events cannot be sent using something like vote webhook and need their own format which is what FatesHook is for. All Fates Client Webhooks like the Vote Webhook will be sent as a JSON with the Authorization header being your API token. Warning All Fates Client libraries which support v2 will support this. Some v1 libraries may also work but this is not guaranteed as the format for webhooks has changed a bit during the transition to v2 Basic Format Key Description Type Notes payload This will always be \u201devent\u201d in FatesHook String None event This is the name of the event in question String None context This is the extra information about your event. Object Different events have different key value pairs bot_id This is the corresponding Bot ID of the event Snowflake? Only sent when dealing with bors guild_id This is the corresponding Guild ID of the event Snowflake? Only sent when dealing with servers/guilds event_id This is the event ID of the event in question UUID None type What type of entity you are dealing with (whether its a bot or a guild) String Will either be \u201dbot\u201d or \u201dguild\u201d depending on the entity. mode This tells you the mode and allows you to quickly check between \u201dFC\u201d (FatesHook) or \u201dVOTE\u201d (Vote Webhook) String None Base Event Context All events in Fates List share the basic format in the below table. If it does mot, then you have 99% found a bug and you should report it on the support server. Additional key valie pairs may be present and these will be noted below. Key Value Typw user This is the User ID responsible for the event Snowflake Special Event Contexts If an event does not appear here, then it uses rhe simple base context format. Reviews The context of a new review or a edit review event is a Partial Review of the review and if the event is new review or edit review, all the Reviews of the bot or server as well (which has every review of your bot or server including the newly added or edited one. Note that all the reviews is only sent on new review and edit review)","title":"FatesHook (Fates Client)"},{"location":"webhook/fateshook/#fateshook-fates-client","text":"Note There are many types of webhooks in Fates List. Please choose the one you use carefully. Also note that all Fates List webhooks (excl. Discord Integration) will have a Authorization header with your API Token so you can validate the request. FatesHook is a webhook type to get additional events like edit bot, review events and more. These events cannot be sent using something like vote webhook and need their own format which is what FatesHook is for. All Fates Client Webhooks like the Vote Webhook will be sent as a JSON with the Authorization header being your API token. Warning All Fates Client libraries which support v2 will support this. Some v1 libraries may also work but this is not guaranteed as the format for webhooks has changed a bit during the transition to v2","title":"FatesHook (Fates Client)"},{"location":"webhook/fateshook/#basic-format","text":"Key Description Type Notes payload This will always be \u201devent\u201d in FatesHook String None event This is the name of the event in question String None context This is the extra information about your event. Object Different events have different key value pairs bot_id This is the corresponding Bot ID of the event Snowflake? Only sent when dealing with bors guild_id This is the corresponding Guild ID of the event Snowflake? Only sent when dealing with servers/guilds event_id This is the event ID of the event in question UUID None type What type of entity you are dealing with (whether its a bot or a guild) String Will either be \u201dbot\u201d or \u201dguild\u201d depending on the entity. mode This tells you the mode and allows you to quickly check between \u201dFC\u201d (FatesHook) or \u201dVOTE\u201d (Vote Webhook) String None","title":"Basic Format"},{"location":"webhook/fateshook/#base-event-context","text":"All events in Fates List share the basic format in the below table. If it does mot, then you have 99% found a bug and you should report it on the support server. Additional key valie pairs may be present and these will be noted below. Key Value Typw user This is the User ID responsible for the event Snowflake","title":"Base Event Context"},{"location":"webhook/fateshook/#special-event-contexts","text":"If an event does not appear here, then it uses rhe simple base context format.","title":"Special Event Contexts"},{"location":"webhook/fateshook/#reviews","text":"The context of a new review or a edit review event is a Partial Review of the review and if the event is new review or edit review, all the Reviews of the bot or server as well (which has every review of your bot or server including the newly added or edited one. Note that all the reviews is only sent on new review and edit review)","title":"Reviews"},{"location":"webhook/vote/","text":"Vote Webhook Note There are many types of webhooks in Fates List. Please choose the one you use carefully. Also note that all Fates List webhooks (excl. Discord Integration) will have a Authorization header with your API Token so you can validate the request. Vote Webhooks are the webhook type if you want to just capture votes in a simple format that is compatible with other lists. If you want more events like review creation and review voting, edit bot and other such events, you will need to switch to the FatesHook webhook type (see FatesHook ) but in most cases, this is not required. It is also harder to handle FatesHook events compared to this and you are better off using websockets (documentation coming soon) if u need those real time stats. Key Description Type id This is the ID of the user who voted for your bot Snowflake votes This is how many votes your bot now has Integer test This key is only returned if you are testing your webhook. It will always be true if sent. Use this to check for test webhook or not. Boolean? mode This tells you the mode and allows you to quickly check between \u201dFC\u201d (FatesHook) or \u201dVOTE\u201d (Vote Webhook). Ignore it if you are not a library String payload This will always be \u201devent\u201d in Vote Webhook. Ignore it. It\u2019s a implementation detail that bots now rely on seeing for some reason. String","title":"Vote Webhook"},{"location":"webhook/vote/#vote-webhook","text":"Note There are many types of webhooks in Fates List. Please choose the one you use carefully. Also note that all Fates List webhooks (excl. Discord Integration) will have a Authorization header with your API Token so you can validate the request. Vote Webhooks are the webhook type if you want to just capture votes in a simple format that is compatible with other lists. If you want more events like review creation and review voting, edit bot and other such events, you will need to switch to the FatesHook webhook type (see FatesHook ) but in most cases, this is not required. It is also harder to handle FatesHook events compared to this and you are better off using websockets (documentation coming soon) if u need those real time stats. Key Description Type id This is the ID of the user who voted for your bot Snowflake votes This is how many votes your bot now has Integer test This key is only returned if you are testing your webhook. It will always be true if sent. Use this to check for test webhook or not. Boolean? mode This tells you the mode and allows you to quickly check between \u201dFC\u201d (FatesHook) or \u201dVOTE\u201d (Vote Webhook). Ignore it if you are not a library String payload This will always be \u201devent\u201d in Vote Webhook. Ignore it. It\u2019s a implementation detail that bots now rely on seeing for some reason. String","title":"Vote Webhook"}]}